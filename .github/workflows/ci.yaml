name: CI
# concurrency:
  # group: ${{ github.ref }}
  # cancel-in-progress: ${{ github.event_name == 'pull_request' }}
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:

  install-dependencies:
    name: Install Dependencies
    runs-on: ubuntu-latest
    env:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
    outputs:
      filter: ${{steps.changed_packages.outputs.filter}}
      spec: ${{steps.changed_packages.outputs.spec}}

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup PNPM with Dependencies
        uses: ./.github/actions/setup-pnpm-with-dependencies/
        with:
          force-install: 'true'

      - name: Check for pnpm-lock change
        id: lock-changed
        uses: tj-actions/changed-files@v34
        with:
          files: |
            pnpm-lock.yaml

      - name: Getting changed packages
        id: changed_packages
        # filter: "{packages/(demo-component|utils)}"
        # spec: "--spec packages/demo-component --spec packages/demo-test" (only if cy.ts found in package)
        run: |
          lernaCommand="changed"
          if [[ "${{ steps.lock-changed.outputs.any_changed }}" == "true" ]]; then
            lernaCommand="ls"
          fi

          echo "lernaCommand: ${lernaCommand}"

          filter="{packages/("
          spec=""
          for pkg in $(lerna ${lernaCommand})
          do
            filter=${filter}$(echo "${pkg}" | sed 's/@kong-ui\///g')"|"

            cPkg=$(echo "${pkg}" | sed 's/@kong-ui/packages/g')
            findRes=$(find "${cPkg}" -name "*.cy.ts" || true)
            if [[ -n "${findRes}" ]]; then
              spec="${spec} --spec ${cPkg}"
            fi
          done
          filter=$(echo "${filter}" | sed 's/|$//')")}"

          echo "filter=${filter}" >> $GITHUB_OUTPUT
          echo "spec=${spec}" >> $GITHUB_OUTPUT

  build:
    name: Build And Test
    needs: install-dependencies
    # do not do anything unless changed package is detected
    if: ${{ needs.install-dependencies.outputs.filter != '{packages/()}' }}
    runs-on: ubuntu-latest
    env:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3

      - name: Setup PNPM with Dependencies
        uses: ./.github/actions/setup-pnpm-with-dependencies/

      - name: Lint Packages
        run: pnpm  --stream --filter "${{needs.install-dependencies.outputs.filter}}" run lint

      - name: Build Packages
        # The `...` syntax tells pnpm to include dependent packages
        run: pnpm --stream --filter "...${{needs.install-dependencies.outputs.filter}}..." run build

      - name: Run Unit Tests
        run: pnpm --stream --filter "${{needs.install-dependencies.outputs.filter}}" run test:unit

      - name: Prepare Cypress
        if: ${{ needs.install-dependencies.outputs.spec != '' }}
        run: pnpm cypress install


      - name: Run Component Tests
        if: ${{ needs.install-dependencies.outputs.spec != '' }}
        uses: cypress-io/github-action@v4
        with:
          install: false
          command: pnpm run test:component:ci ${{needs.install-dependencies.outputs.spec}}

      - name: Upload Component Tests Results
        uses: actions/upload-artifact@v3
        continue-on-error: true
        if: failure()
        with:
          name: component-test-failures
          path: |
            cypress/videos/
            cypress/screenshots/


      - name: Save Build Artifacts
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        uses: actions/upload-artifact@v3
        with:
          name: package-dist-artifacts
          path: packages/*/dist

      - name: Publish previews
        if: github.event_name == 'pull_request'
        uses: ./.github/actions/publish-previews/
        with:
          filter: ${{needs.install-dependencies.outputs.filter}}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          netlify-token: ${{ secrets.NETLIFY_AUTH_TOKEN }}

  publish:
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    name: Publish
    needs:
      - install-dependencies
      - build
    runs-on: ubuntu-latest
    env:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      GH_TOKEN: ${{ secrets.KONGPONENTS_BOT_PAT }}
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.KONGPONENTS_BOT_PAT }}

      - name: Setup PNPM with Dependencies
        uses: ./.github/actions/setup-pnpm-with-dependencies/

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: package-dist-artifacts
          path: packages/

      - name: Update package versions
        run: |
          git config user.email "konnectx-engineers+kongponents-bot@konghq.com"
          git config user.name "Kong UI Bot"
          lerna version --conventional-commits --create-release github --yes

      - name: Publish packages to NPM
        run: pnpm --stream --filter "${{needs.install-dependencies.outputs.filter}}" publish  --no-git-checks --access restricted
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Packages must be added to <https://github.com/Kong/package-publisher/blob/main/publisher-config.json> in order to be published
      - name: Trigger a build for packages.konghq.tech
        run: |
          curl -X POST \
              -H 'Accept: application/vnd.github.everest-preview+json' \
              -H  'Content-Type: application/json' \
              -H 'Authorization: token ${{ secrets.KONGPONENTS_BOT_PAT }}' \
              --data '{"event_type": "webhook"}' https://api.github.com/repos/Kong/package-publisher/dispatches


      - name: Push JS Map files
        id: push-js-maps
        run: |
          for folder in $(echo "${{needs.install-dependencies.outputs.filter}}" |sed 's/{packages\/(//g'|sed 's/)}//g'| tr '|' '\n')
          do
              echo "Processing map files for ${folder}"
              if [[ -d "packages/${folder}/dist" ]]; then
                echo "dist folder found"

                pkgName=$(cat packages/${folder}/package.json |jq  -r ".name")
                pkgVersion=$(cat packages/${folder}/package.json |jq  -r ".version")

                pnpm datadog-ci sourcemaps upload packages/${folder}/dist \
                  --service=konnect-ui \
                  --release-version="_" \
                  --minified-path-prefix=https://packages.konghq.tech/${pkgName}@${pkgVersion}/dist
              fi
          done
        env:
          DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}

  notify-slack:
    name: Slack Notification
    if: ${{ always() && github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs:
      - publish
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3

      - name: Get aggregate Workflow status
        uses: technote-space/workflow-conclusion-action@v3

      - name: Send notification
        uses: edge/simple-slack-notify@v1
        env:
          SLACK_WEBHOOK_URL: ${{ env.WORKFLOW_CONCLUSION == 'failure' && secrets.SLACK_WEBHOOK_URL_ALERT || secrets.SLACK_WEBHOOK_URL_NOTIFY }}
        with:
          status: ${{ env.WORKFLOW_CONCLUSION }}
          success_text: '<${env.GITHUB_SERVER_URL}/${env.GITHUB_REPOSITORY}/actions/runs/${env.GITHUB_RUN_ID}|${env.GITHUB_WORKFLOW} (${env.GITHUB_RUN_NUMBER})> workflow completed successfully :mario_luigi_dance:'
          failure_text: '<${env.GITHUB_SERVER_URL}/${env.GITHUB_REPOSITORY}/actions/runs/${env.GITHUB_RUN_ID}|${env.GITHUB_WORKFLOW} (${env.GITHUB_RUN_NUMBER})> workflow failed :sad-panda:'
          fields: |
            [{ "title": "Repository", "value": "<${env.GITHUB_SERVER_URL}/${env.GITHUB_REPOSITORY}|${env.GITHUB_REPOSITORY}>", "short": true },
             { "title": "Branch", "value": "<${env.GITHUB_SERVER_URL}/${env.GITHUB_REPOSITORY}/tree/${env.GITHUB_HEAD_REF || env.GITHUB_REF.substring(11)}|${env.GITHUB_HEAD_REF || env.GITHUB_REF.substring(11)}>", "short": true },
             { "title": "Revision", "value": "<${env.GITHUB_SERVER_URL}/${env.GITHUB_REPOSITORY}/commit/${env.GITHUB_SHA}|${env.GITHUB_SHA.substring(0,7)}>", "short": true }]
