/* eslint-disable no-use-before-define */
/* eslint-disable no-template-curly-in-string */

import { execSync } from 'child_process'
import fs from 'fs'
import path from 'path'

import yaml from 'js-yaml'

interface DependabotConfig {
  version: number
  registries: {
    npm?: NPMRegistryConfig
  }
  updates: UpdateConfig[]
}

interface NPMRegistryConfig {
  type: string
  url: string
  token: string
}

interface UpdateConfig {
  'package-ecosystem': 'github-actions' | 'npm'
  directory: string
  schedule: UpdateScheduleConfig
  registries?: Array<keyof DependabotConfig['registries']>
  'commit-message'?: CommitMessageConfig
  'open-pull-requests-limit'?: number
}

interface CommitMessageConfig {
  prefix: string
}

interface UpdateScheduleConfig {
  interval: 'daily' | 'weekly'
  time?: string
}

interface LernaPackage {
  name: string
  location: string
}

function generateConfig() {
  const dependabotConfigPath = path.join(__dirname, '..', '.github', 'dependabot.yml')

  const dependabotConfig: DependabotConfig = {
    version: 2,
    registries: {
      npm: {
        type: 'npm-registry',
        url: 'https://registry.npmjs.org',
        token: '${{ secrets.NPM_TOKEN }}',
      },
    },
    updates: [
      {
        'package-ecosystem': 'github-actions',
        directory: '/',
        schedule: { interval: 'daily' },
        'commit-message': { prefix: 'ci' },
      },
      {
        'package-ecosystem': 'npm',
        directory: '/',
        schedule: { interval: 'daily' },
        registries: ['npm'],
        'commit-message': { prefix: 'build(deps)' },
        'open-pull-requests-limit': 5,
      },
      ...getUpdateConfigForPackages(),
    ],
  }

  createDependabotConfigFile(dependabotConfig, dependabotConfigPath)
}

function getUpdateConfigForPackages(): UpdateConfig[] {
  const cmd = 'pnpm exec lerna ls --json'
  const updateScheduleTime = new Date('2022 03:00:00 UTC')
  const lernaPackageList: LernaPackage[] = JSON.parse(execSync(cmd).toString())

  return lernaPackageList.map((lernaPkg) => {
    const updateConfig: UpdateConfig = {
      directory: path.sep + lernaPkg.location.split(path.sep).slice(-2).join(path.sep),
      'package-ecosystem': 'npm',
      registries: ['npm'],
      'commit-message': {
        prefix: 'build(deps)',
      },
      schedule: {
        interval: 'daily',
        time: `${String(updateScheduleTime.getUTCHours()).padStart(2, '0')}:${String(
          updateScheduleTime.getUTCMinutes(),
        ).padStart(2, '0')}`,
      },
    }

    updateScheduleTime.setMinutes(updateScheduleTime.getMinutes() + 15)

    return updateConfig
  })
}

function createDependabotConfigFile(config: DependabotConfig, configPath: string) {
  fs.writeFileSync(
    configPath,
    '# NOTE - This file is autogenerated by running pnpm run generate-dependabot-config from the project root!\n\n',
  )
  fs.appendFileSync(configPath, yaml.dump(config))
}

generateConfig()
